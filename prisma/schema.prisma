generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  OWNER
  ADMIN
  MANAGER
  EMPLOYEE
  HR
  AUDITOR
  STAKEHOLDER
  VIEWER
}

enum NotificationType {
  MESSAGE
  TICKET
  TEAM
  ANNOUNCEMENT
  REQUEST
}

enum InviteStatus {
  PENDING
  ACCEPTED
  EXPIRED
  DECLINED
}

enum LeaveStatus {
  PENDING
  APPROVED
  EXPIRED
  REJECTED
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum MaritalStatus {
  SINGLE
  MARRIED
  DIVORCED
  WIDOWED
}

enum EmploymentType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERN
}

enum BankAccountType {
  SAVINGS
  CURRENT
}

model Tenant {
  id                String             @id @default(uuid())
  name              String
  subdomain         String             @unique
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  tenantUsers       TenantUser[]
  notifications     Notification[]
  notificationsRead NotificationRead[]
  Invites           Invite[]
  leaves            Leave[]
  leaveBalances     leaveBalance[]
  leaveTypes        LeaveType[]
}

model User {
  id                String             @id @default(uuid())
  email             String             @unique
  passwordHash      String
  name              String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  tenantUsers       TenantUser[]
  notifications     Notification[]     @relation("NotificationRecipient")
  notificationsRead NotificationRead[]
  Invites           Invite[]
  leaves            Leave[]
  leaveBalances     leaveBalance[]
  notificationsSent Notification[]     @relation("NotificationCreator")
}

// join table for many-to-many relationship between User and Tenant
model TenantUser {
  userId   String
  tenantId String
  email    String
  role     Role
  user     User   @relation(fields: [userId], references: [id])
  tenant   Tenant @relation(fields: [tenantId], references: [id])

  @@id([userId, tenantId])
  @@unique([tenantId, email])
}

model Notification {
  id                String             @id @default(uuid())
  title             String
  message           String
  type              NotificationType
  read              Boolean            @default(false)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  userId            String?
  createdById       String
  tenantId          String             
  targetRoles       Role[]             @default([])
  user              User?              @relation("NotificationRecipient", fields: [userId], references: [id])
  CreatedBy         User               @relation("NotificationCreator", fields: [createdById], references: [id])
  tenant            Tenant             @relation(fields: [tenantId], references: [id])
  notificationsRead NotificationRead[]
}

model NotificationRead {
  userId         String
  notificationId String
  tenantId       String
  readAt         DateTime     @default(now())
  user           User         @relation(fields: [userId], references: [id])
  notification   Notification @relation(fields: [notificationId], references: [id])
  Tenant         Tenant       @relation(fields: [tenantId], references: [id])

  @@id([userId, tenantId, notificationId])
}

model Invite {
  name       String
  id         String       @id @default(uuid())
  email      String      
  tenantId   String
  invitedBy  String
  role       Role
  status     InviteStatus @default(PENDING)
  tenant     Tenant       @relation(fields: [tenantId], references: [id])
  inviter    User         @relation(fields: [invitedBy], references: [id])
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  emailSent  Boolean      @default(false)
  acceptedAt DateTime?
  declinedAt DateTime?

  @@unique([tenantId, email])
}

model Employee {
  id       String @id @default(uuid())
  tenantId String

  // Personal Information
  name          String
  gender        Gender
  dateOfBirth   DateTime
  maritalStatus MaritalStatus
  language      String?
  nationality   String?

  // Contact Information
  phoneNumber  String
  email        String  
  workEmail    String 
  addressLine1 String?
  addressLine2 String?

  // ðŸ§¾ Identification
  aadhaarNumber       String?
  panNumber           String?
  driverLicenseNumber String?

  //  Employment Details
  designation        String
  department         String
  employmentType     EmploymentType
  dateOfJoining      DateTime
  workLocation       String
  reportingManagerId String?
  role               Role

  // Bank Details
  bankName              String
  bankAccountHolderName String
  bankAccountNumber     String
  bankAccountType       BankAccountType
  bankIfscCode          String
  bankBranch            String
  inviteUser            Boolean         @default(true)

  // Relations
  reportingManager Employee?    @relation("ManagerReportee", fields: [reportingManagerId], references: [id])
  reportees        Employee[]   @relation("ManagerReportee")
  workLocationMeta WorkLocation @relation(fields: [workLocation], references: [id])
  departmentMeta   Department   @relation(fields: [department], references: [id])
  designationMeta  Designation  @relation(fields: [designation], references: [id])

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([tenantId, email])
  @@unique([tenantId, id])
}

model Designation {
  id             String     @id @default(uuid())
  tenantId       String
  name           String
  totalEmployees Int        @default(0)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  employees      Employee[]
}

model Department {
  id             String     @id @default(uuid())
  tenantId       String
  name           String
  totalEmployees Int        @default(0)
  code           String
  description    String
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  employees      Employee[]
}

model WorkLocation {
  id             String     @id @default(uuid())
  tenantId       String
  name           String
  state          String
  city           String
  pincode        String
  addressLine1   String
  addressLine2   String
  totalEmployees Int        @default(0)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  employees      Employee[]
}

// leave

model Leave {
  id          String      @id @default(uuid())
  tenantId    String
  userId      String
  leaveTypeId String
  from        DateTime
  to          DateTime
  reason      String?
  status      LeaveStatus
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  approvedAt  DateTime?
  rejectedAt  DateTime?

  tenant    Tenant    @relation(fields: [tenantId], references: [id])
  user      User      @relation(fields: [userId], references: [id])
  leaveType LeaveType @relation(fields: [leaveTypeId], references: [id])
}

model LeaveType {
  id            String         @id @default(uuid())
  tenantId      String
  name          String
  leaves        Leave[]
  leaveBalances leaveBalance[]
  tenant        Tenant         @relation(fields: [tenantId], references: [id])

  @@unique([name, tenantId])
}

model leaveBalance {
  userId      String
  tenantId    String
  leaveTypeId String
  available   Int? // nullable = supports unlimited or undefined (eg: unpaid leaves)
  booked      Int       @default(0)
  year        Int
  user        User      @relation(fields: [userId], references: [id])
  tenant      Tenant    @relation(fields: [tenantId], references: [id])
  leaveType   LeaveType @relation(fields: [leaveTypeId], references: [id])

  @@unique([tenantId, userId, leaveTypeId, year])
}
